/*
 * JBoss, Home of Professional Open Source.
 * Copyright 2012 Red Hat, Inc., and individual contributors
 * as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.undertow.server.security;

import static org.junit.Assert.assertEquals;

import io.undertow.security.idm.DigestAlgorithm;
import io.undertow.security.impl.DigestAuthorizationToken;
import io.undertow.security.impl.DigestQop;

import java.util.HashMap;
import java.util.Map;

import org.junit.Test;

/**
 * Test case to test the parsing of the Authorization header for Digest requests.
 *
 * The RFC defines which values are quoted and which ones are not, however different implementations interpret this differently.
 * This test case tests different headers generated by supported browsers.
 *
 * Ordering of the values is not important, however the construction of the Map of expected values does match the header being
 * tested for readability.
 *
 * @author <a href="mailto:darran.lofthouse@jboss.com">Darran Lofthouse</a>
 */
public class ParseDigestAuthorizationTokenTestCase {

    private void doTest(final String header, final Map<DigestAuthorizationToken, String> expected) {
        Map<DigestAuthorizationToken, String> parsedHeader = DigestAuthorizationToken.parseHeader(header);

        assertEquals(expected, parsedHeader);
    }

    @Test public void testCurl_7(){final String header="username=\"userTwo\", realm=\"Digest_Realm\", nonce=\"5CgZ39vhie0NMTM1MTUyNDc4ODkwNMwr6sWKVSGfhXB4jBtkupY=\", uri=\"/\", cnonce=\"MTYwOTQ4\", nc=00000001, qop=\"auth\", response=\"c3c1ce9945a0c36d54860eda7846018b\", opaque=\"00000000000000000000000000000000\", algorithm=\"MD5\"";Map<DigestAuthorizationToken, String> expected=new HashMap<DigestAuthorizationToken, String>(10);expected.put(DigestAuthorizationToken.USERNAME,"userTwo");expected.put(DigestAuthorizationToken.REALM,"Digest_Realm");expected.put(DigestAuthorizationToken.NONCE,"5CgZ39vhie0NMTM1MTUyNDc4ODkwNMwr6sWKVSGfhXB4jBtkupY=");expected.put(DigestAuthorizationToken.DIGEST_URI,"/");expected.put(DigestAuthorizationToken.CNONCE,"MTYwOTQ4");expected.put(DigestAuthorizationToken.NONCE_COUNT,"00000001");expected.put(DigestAuthorizationToken.MESSAGE_QOP,DigestQop.AUTH.getToken());expected.put(DigestAuthorizationToken.RESPONSE,"c3c1ce9945a0c36d54860eda7846018b");expected.put(DigestAuthorizationToken.OPAQUE,"00000000000000000000000000000000");expected.put(DigestAuthorizationToken.ALGORITHM,DigestAlgorithm.MD5.getToken());doTest(header,expected);}

}
